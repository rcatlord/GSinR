knitr::opts_chunk$set(echo=TRUE, cache=TRUE, prompt=FALSE, tidy=TRUE, comment=NA, message=FALSE, warning=FALSE)
# load necessary packages
library(gapminder)
library(ggplot2)
library(dplyr)
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 1) +
facet_grid(gdp_factor ~ .) #Facets are another element of the grammar of graphics, we use it to define subsets of the data to be represented as multiple groups, here we are asking R to produce two plots defined by the two levels of the factor we just created.
library(gapminder)
gapminder_2007 <- filter(gapminder, year==2007)
ggplot(gapminder_2007, aes(x = lifeExp)) + #The "aes" argument defines the aesthetics for the plot. Here, we are telling R that the data frame for plotting is gapminder_2007 and our X variable, displayed in the X axis, will be life expectancy. So we are specfying that we are using the "lifeExp" variable to display a position in the X axis.
geom_histogram() #If we just run the function in the first line we won't be plotting anything, we have to gell R what type of object, or geom, is going to represent the data that we specified in the aesthetics. There are multiple geoms we can use. For a histogram we use the geom_histogram.
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 1) #We can pass arguments to the the geoms, here we are changing the size of the bins (for further details on other arguments you can check the help files)
#Let's sum the number of countries with a value of 60 or over in life expectancy
sum(gapminder_2007$lifeExp >= 60 )
gapminder_2007 <- gapminder_2007 %>%
mutate(gdp_factor = if_else(gdpPercap > mean(gdpPercap), "high gdp", "low gdp"))
gapminder_2007$gdp_factor <- as.factor(gapminder_2007$gdp_factor) #The variable we created was a character vector, this step transforms it into a factor (many functions designed to work with categorical variables expect a factor as an input, not just a character vector).
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 1) +
facet_grid(gdp_factor ~ .) #Facets are another element of the grammar of graphics, we use it to define subsets of the data to be represented as multiple groups, here we are asking R to produce two plots defined by the two levels of the factor we just created.
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 1) +
facet_grid(~ gdp_factor) #Facets are another element of the grammar of graphics, we use it to define subsets of the data to be represented as multiple groups, here we are asking R to produce two plots defined by the two levels of the factor we just created.
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 1) +
facet_grid(gdp_factor ~ .) #Facets are another element of the grammar of graphics, we use it to define subsets of the data to be represented as multiple groups, here we are asking R to produce two plots defined by the two levels of the factor we just created.
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 1) +
facet_wrap(~ gdp_factor) #Facets are another element of the grammar of graphics, we use it to define subsets of the data to
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 1) +
facet_grid(gdp_factor ~ .)
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 1) +
facet_wrap(~ gdp_factor)
ggplot(gapminder_2007, aes(x = lifeExp, fill = gdp_factor)) + #"fill" refers to the fill of the geometry which in this case is the bars of the histogram.
geom_histogram(position = "identity", alpha = 0.4) #"position = identity" tells R to overlay the distributions and "alpha" asks for the degree of transparency, a lower value will be more transparent
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_density()
#We are mapping "gdp_factor" as the variable colouring the lines
ggplot(gapminder_2007, aes(x = lifeExp, colour = gdp_factor)) +
geom_density()
#We are mapping "gdp_factor" as the variable colouring the lines
ggplot(gapminder_2007, aes(x = lifeExp, colour = gdp_factor)) +
geom_density()
ggplot(gapminder_2007, aes(x = lifeExp, fill = gdp_factor)) +
geom_density(alpha = .3)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point()
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.4) #you will have to test different values for alpha
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.2, position="jitter")
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
stat_bin2d()
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
stat_bin2d(bins=50) + #by increasing the number of bins we get more granularity
scale_fill_gradient(low = "lightblue", high = "red")
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.4) +
geom_line(stat='summary', fun.y=mean)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.4) +
geom_line()
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.4) +
geom_line()
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.4) +
geom_line(stat='summary', fun.y=mean)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.4) +
stat_summary(fun.y=mean,geom="line",lwd=2,aes(group=1))
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.4) +
stat_summary(fun.y=mean,geom="line",lwd=1,aes(group=1))
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.4) +
geom_line(stat='summary', fun.y=mean)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.4) +
geom_smooth(colour="red", size=1, se=FALSE)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.4) +
geom_smooth(colour="red", size=1, se=T)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point()
?gapminder
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(se=FALSE, size=1) #I am doing the lines thicker to see them better
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(colour = continent, se=FALSE, size=1)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(se=FALSE, size=1)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(se=FALSE, size=3)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent, group = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(se=FALSE, size=1)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(colour="red", size=1, se=TRUE)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(colour = continent, size=1, se=TRUE)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(group = continent, size=1, se=TRUE)
names(gapminder_2007)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth() #I am doing the lines thicker to see them better
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(aes(colour = continent), size=1, se=TRUE)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(aes(colour = continent), size=4, se=FALSE)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point() + #I am doing the points semi-transparent to see the lines better
geom_smooth() #I am doing the lines thicker to see them better
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point()   +
geom_smooth(method = "nls")
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point()   +
geom_smooth(aes(group = continent))
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, group = continent)) +
geom_point()   +
geom_smooth(aes(group = continent))
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point()   +
geom_smooth(aes(group = continent))
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(aes(colour = continent))
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(aes(colour = continent), size = 3)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point(alpha=.4) + #I am doing the points semi-transparent to see the lines better
geom_smooth(aes(colour = factor(continent)), size = 3)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = factor(continent))) +
geom_point(alpha=1) + #I am doing the points semi-transparent to see the lines better
geom_smooth(aes(colour = factor(continent)), size = 3)
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = pop)) +
geom_point()
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, size = pop)) +
geom_point() #You may want to add alpha for some transparency here.
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha=.4, position="jitter") +
facet_wrap( ~ continent)
pairs(gapminder_2007)
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1+r)/2)
}
panel.hist <-function(x, ...){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks
nB <- length(breaks)
y <- h$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="white", ...)
}
pairs(gapminder_2007, pch=".", #Produces smaller points to make it easier to see
upper.panel=panel.smooth, #Adds for smoothed lines to be added to the lower panel scatterplots
lower.panel=panel.cor, #Ask for correlation coeffients in the upper panel using our customised functions (the size of the numer is bigger is the correlation is bigger, but notice that the coefficient does not include the sign, whether is positve or negative, you need to infer that from the scatterplot)
diag.panel=panel.hist) #Ask for histograms in the diagonal using our customised function
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1+r)/2)
}
panel.hist <-function(x, ...){
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks
nB <- length(breaks)
y <- h$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="white", ...)
}
pairs(gapminder_2007, pch=".", #Produces smaller points to make it easier to see
upper.panel=panel.smooth, #Adds for smoothed lines to be added to the lower panel scatterplots
lower.panel=panel.cor, #Ask for correlation coeffients in the upper panel using our customised functions (the size of the numer is bigger is the correlation is bigger, but notice that the coefficient does not include the sign, whether is positve or negative, you need to infer that from the scatterplot)
diag.panel=panel.hist) #Ask for histograms in the diagonal using our customised function
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point() +
labs(title = "Fig 1.Life Expectancy, GDP Per Capita in different Continents")
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point() +
labs(title = "Fig 1.Life Expectancy, GDP Per Capita in different Continents")
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point() +
labs(title = "Fig 1.Life Expectancy, GDP Per Capita in different Continents") +
theme_bw()
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point() +
labs(title = "Fig 1.Life Expectancy, GDP Per Capita in different Continents")
x = "GDP per capita",
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, colour = continent)) +
geom_point() +
labs(title = "Fig 1.Life Expectancy, GDP Per Capita in different Continents",
x = "GDP per capita",
y = "Life expectancy at birth, in years",
colour = "Continent") +
scale_colour_discrete(labels = c("AFRICA", "AMERICAS", "ASIA", "EUROPE", "OCEANIA"))
ggplot(gapminder_2007, aes(x=gdp_factor)) +
geom_bar()
#Print the original order
print(levels(gapminder_2007$gdp_factor))
#Reordering the factor levels. Notice that I am creating a new variable. It is often not unwise to do this to avoid messing up your original data.
gapminder_2007$gdp_factor_2 <- factor(gapminder_2007$gdp_factor, levels=c('low gdp', 'high gdp'))
#Reordering the factor levels. Notice that I am creating a new variable. It is often not unwise to do this to avoid messing up your original data.
gapminder_2007$gdp_factor_2 <- factor(gapminder_2007$gdp_factor, levels=c('low gdp', 'high gdp'))
ggplot(gapminder_2007, aes(x=gdp_factor_2)) +
geom_bar()
ggplot(gapminder_2007, aes(x=continent, fill = gdp_factor_2)) +
geom_bar()
.df1 <- data.frame(x = gapminder_2007$continent, z = gapminder_2007$gdp_factor)
#Then we compute the proportions within the stacks
.df1 <- as.data.frame(with(.df1, prop.table(table(x, z), margin = NULL)))
#Finally we plot
stbcf <- ggplot(.df1, aes(x = x, y = Freq, fill = z)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(expand = c(0.01, 0), labels = scales::percent_format()) + #Adapts the scale of the y axis and express the values in percentage terms
xlab("Feelings of safety") + #Another way of changing the label for the x axis
ylab("Percent") + #Change the label for the Y axis
guides(fill = guide_legend(title = NULL)) #This removes the title of the legent (bcsvictim), since the labels of the categories are self-explanatory
stbcf
.df1 <- data.frame(x = gapminder_2007$continent, z = gapminder_2007$gdp_factor)
.df1
.df1 <- as.data.frame(with(.df1, prop.table(table(x, z), margin = NULL)))
.df1
.df1 <- as.data.frame(with(.df1, prop.table(table(x, z)))
)
.df1
.df1 <- as.data.frame(with(.df1, prop.table(table(x, z), margin = NULL)))
.df1
#First we create a subset with the relevant data
.df1 <- data.frame(x = gapminder_2007$continent, z = gapminder_2007$gdp_factor)
.df1 <- data.frame(x = gapminder_2007$continent, z = gapminder_2007$gdp_factor)
.df1 <- as.data.frame(with(.df1, prop.table(table(x, z))))
.df1
stbcf <- ggplot(.df1, aes(x = x, y = Freq, fill = z)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(expand = c(0.01, 0), labels = scales::percent_format()) + #Adapts the scale of the y axis and express the values in percentage terms
xlab("Continent") + #Another way of changing the label for the x axis
ylab("Percent") + #Change the label for the Y axis
guides(fill = guide_legend(title = NULL)) #This removes the title of the legend (bcsvictim), since the labels of the categories are self-explanatory.
stbcf
rm(.df1) #to remove the data frame we created
#First we invoke the plot we created and stored earlier and then we add an additional specification with coord_flip()
stbcf + coord_flip()
library(waffle)
t <- c('Remain' = 35,
"Leave" = 37,
"Didn't vote"	 = 28)
waffle(t, rows = 10, colors=c("#a6cee3",
"#1f78b4",
"#33a02c"),
title="Brexit results",
xlab="1 square = 1%")
install.packages('bindrcpp')
